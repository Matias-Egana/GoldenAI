# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mockupGoldenAi.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from database import initialize_database, mostrar_patente_widget, mostrar_patentes_permitidas
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QTableWidgetItem
import cv2
from procesarImagen import procesar_imagen
import res_rc

class GoldenAi(object):
    def setupUi(self, MainWindow, usuario_id=None):
        self.usuario_id = usuario_id
        print(usuario_id)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1152, 864)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/image/background/icon_goldenAi.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color:rgb(149, 129, 200)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setStyleSheet("")
        self.widget.setObjectName("widget")
        self.scrollArea = QtWidgets.QScrollArea(self.widget)
        self.scrollArea.setGeometry(QtCore.QRect(0, 10, 611, 741))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 609, 739))
        self.scrollAreaWidgetContents.setStyleSheet("")
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.Camara = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.Camara.setGeometry(QtCore.QRect(10, 60, 601, 701))
        self.Camara.setStyleSheet("background-color:white;")
        self.Camara.setText("")
        self.Camara.setObjectName("Camara")
        self.bAtras = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.bAtras.setGeometry(QtCore.QRect(10, 0, 40, 41))
        self.bAtras.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.bAtras.setStyleSheet("QPushButton {\n"
"     background-color: transparent; \n"
"      border: none;\n"
" }\n"
" QPushButton:hover {\n"
"      background-color: grey;\n"
" }")
        self.bAtras.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/image/background/hacia-atras.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bAtras.setIcon(icon1)
        self.bAtras.setIconSize(QtCore.QSize(40, 40))
        self.bAtras.setObjectName("bAtras")
        self.bAtras.clicked.connect(lambda: self.openIngresar(MainWindow))
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setGeometry(QtCore.QRect(620, 60, 501, 701))
        self.tableWidget.setStyleSheet("             QTableWidget {\n"
"                background-color: rgba(245, 245, 255, 255); /* Morado muy claro */\n"
"                color: black;\n"
"                gridline-color: rgba(200, 200, 200, 255);\n"
"                font-size: 14px;\n"
"            }\n"
"            QHeaderView::section {\n"
"                background-color: rgba(220, 220, 255, 255); /* Morado claro */\n"
"                color: black;\n"
"                font-weight: bold;\n"
"                border: 1px solid rgba(200, 200, 200, 255);\n"
"            }\n"
"            QTableWidget::item:selected {\n"
"                background-color: rgba(235, 235, 255, 255); /* Morado muy claro */\n"
"                color: black;\n"
"            }")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.bRegistrar = QtWidgets.QPushButton(self.widget)
        self.bRegistrar.setGeometry(QtCore.QRect(10, 770, 211, 51))
        self.bRegistrar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.bRegistrar.setStyleSheet("            QPushButton {\n"
"                background-color: rgba(245, 245, 255, 255); /* Morado muy claro */\n"
"                color: black;\n"
"                border: none;\n"
"                padding: 10px 20px;\n"
"                border-radius: 5px;\n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color: rgba(220, 220, 255, 255); /* Morado claro */\n"
"            }\n"
"            QPushButton:pressed {\n"
"                background-color: rgba(200, 200, 240, 255); /* Morado claro */\n"
"            } ")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/image/background/icon_agregarPatentes.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bRegistrar.setIcon(icon2)
        self.bRegistrar.setIconSize(QtCore.QSize(50, 50))
        self.bRegistrar.setObjectName("bRegistrar")
        self.bRegistrar.clicked.connect(lambda: self.openRegistroPatentes(MainWindow,usuario_id))
        self.bSalir = QtWidgets.QPushButton(self.widget)
        self.bSalir.setGeometry(QtCore.QRect(1070, 0, 51, 51))
        self.bSalir.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.bSalir.setStyleSheet("\n"
"\n"
"QPushButton {\n"
"     background-color: transparent; \n"
"      border: none;\n"
" }\n"
" QPushButton:hover {\n"
"      background-color: grey;\n"
" }")
        self.bSalir.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/image/background/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bSalir.setIcon(icon3)
        self.bSalir.setObjectName("bSalir")
        self.bSalir.clicked.connect(MainWindow.close)
        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.cap = cv2.VideoCapture(0)  # Inicializar la captura de la cámara
        self.index = 1
        
        # Timers para actualizar la interfaz y capturar imágenes
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_frame)
        self.update_timer.start(30)  # Actualiza cada 30 ms

        self.capture_timer = QTimer()
        self.capture_timer.timeout.connect(self.capture_image)
        self.capture_timer.start(3000)  # Captura cada 3 segundos

        initialize_database()
        self.start_timer()
                           
    def start_timer(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.mostrar_patentes_table)
        self.timer.start(1000)  # Actualiza la tabla cada 1 segundo

    def update_frame(self):
        if hasattr(self, 'cap') and self.cap:  # Verificar si self.cap existe
            ret, frame = self.cap.read()
            if ret:
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                height, width, channel = frame_rgb.shape
                step = channel * width
                q_img = QImage(frame_rgb.data, width, height, step, QImage.Format_RGB888)
                self.Camara.setPixmap(QPixmap.fromImage(q_img))

    def capture_image(self):
        if hasattr(self, 'cap') and self.cap:  # Verificar si self.cap existe
            ret, frame = self.cap.read()
            if ret:
                procesar_imagen(frame, self.index, self.usuario_id)
                self.index += 1

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "GoldenAI"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Digitos"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Hora"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Fecha"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Estado"))
        self.bRegistrar.setText(_translate("MainWindow", "Registro de patentes"))

    def openIngresar(self, MainWindow):
        from Ingresar import Ingresar
        self.release_camera()
        MainWindow.hide()
        self.goldenAiWindow = QtWidgets.QMainWindow()
        self.goldenAi = Ingresar()
        self.goldenAi.setupUi(self.goldenAiWindow)
        self.goldenAiWindow.show()

    def openRegistroPatentes(self, MainWindow, usuario_id):
        from RegistroPatentes import RegistroPatentes
        self.release_camera()
        MainWindow.hide()
        self.goldenAiWindow = QtWidgets.QMainWindow()
        self.goldenAi = RegistroPatentes()
        self.goldenAi.setupUi(self.goldenAiWindow, usuario_id)
        self.goldenAiWindow.show()
    
    def release_camera(self):
        if hasattr(self, 'cap') and self.cap:
            self.cap.release()
            del self.cap
    
    def mostrar_patentes_table(self):
        patentes = mostrar_patente_widget()
        self.tableWidget.setRowCount(len(patentes))
        self.tableWidget.setColumnCount(4)

        for row_num, row_data in enumerate(patentes):
            for col_num, col_data in enumerate(row_data[1:5]):
                item = QTableWidgetItem(str(col_data))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget.setItem(row_num, col_num, item)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = GoldenAi()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
  